{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\AffzPedro\\\\Documents\\\\NLW\\\\podcastrnext\\\\src\\\\pages\\\\index.tsx\";\n//SSG\nimport { format, parseISO } from 'date-fns';\nimport ptBR from 'date-fns/locale/pt-BR';\nimport { api } from '../services/api';\nexport default function Home(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Index\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: new Date(props.episodes[0].published_at).toLocaleDateString\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n} //SSG (versão estatica da pagina)\n\nexport const getStaticProps = async () => {\n  const {\n    data\n  } = await api.get('episodes', {\n    params: {\n      _limit: 12,\n      _sort: 'published_at',\n      _order: 'desc'\n    }\n  });\n  const episodes = data.map(episode => {\n    return {\n      id: episode.id,\n      title: episode.title,\n      thumbnail: episode.thumbnail,\n      members: episode.members,\n      publishedAt: format(parseISO(episode.published_at), 'd MMM YY', {\n        locale: ptBR\n      })\n    };\n  });\n  return {\n    props: {\n      episodes: data\n    },\n    revalidate: 60 * 60 * 8\n  };\n};","map":{"version":3,"sources":["C:/Users/AffzPedro/Documents/NLW/podcastrnext/src/pages/index.tsx"],"names":["format","parseISO","ptBR","api","Home","props","Date","episodes","published_at","toLocaleDateString","getStaticProps","data","get","params","_limit","_sort","_order","map","episode","id","title","thumbnail","members","publishedAt","locale","revalidate"],"mappings":";;AAAA;AAEA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,UAAjC;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,SAASC,GAAT,QAAoB,iBAApB;AAaA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAgC;AAG7C,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,gBAAI,IAAIC,IAAJ,CAASD,KAAK,CAACE,QAAN,CAAe,CAAf,EAAkBC,YAA3B,EAAyCC;AAA7C;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,C,CAED;;AACA,OAAO,MAAMC,cAA8B,GAAG,YAAY;AACxD,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMR,GAAG,CAACS,GAAJ,CAAQ,UAAR,EAAoB;AACzCC,IAAAA,MAAM,EAAE;AACNC,MAAAA,MAAM,EAAE,EADF;AAENC,MAAAA,KAAK,EAAE,cAFD;AAGNC,MAAAA,MAAM,EAAE;AAHF;AADiC,GAApB,CAAvB;AAQA,QAAMT,QAAQ,GAAGI,IAAI,CAACM,GAAL,CAASC,OAAO,IAAI;AACnC,WAAO;AACLC,MAAAA,EAAE,EAAED,OAAO,CAACC,EADP;AAELC,MAAAA,KAAK,EAAEF,OAAO,CAACE,KAFV;AAGLC,MAAAA,SAAS,EAAEH,OAAO,CAACG,SAHd;AAILC,MAAAA,OAAO,EAAEJ,OAAO,CAACI,OAJZ;AAKLC,MAAAA,WAAW,EAAEvB,MAAM,CAACC,QAAQ,CAACiB,OAAO,CAACV,YAAT,CAAT,EAAiC,UAAjC,EAA6C;AAAEgB,QAAAA,MAAM,EAAEtB;AAAV,OAA7C;AALd,KAAP;AAOD,GARgB,CAAjB;AASA,SAAO;AACLG,IAAAA,KAAK,EAAE;AACLE,MAAAA,QAAQ,EAAEI;AADL,KADF;AAILc,IAAAA,UAAU,EAAE,KAAK,EAAL,GAAU;AAJjB,GAAP;AAMD,CAxBM","sourcesContent":["//SSG\r\nimport { GetStaticProps } from 'next';\r\nimport { format, parseISO } from 'date-fns';\r\nimport ptBR from 'date-fns/locale/pt-BR';\r\nimport { api } from '../services/api';\r\n\r\ntype Episode = {\r\n  id: string;\r\n  title: string;\r\n  members: string;\r\n  published_at: string;\r\n}\r\n\r\ntype HomeProps = {\r\n  episodes: Episode[];\r\n}\r\n\r\nexport default function Home(props: HomeProps) {\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h1>Index</h1>\r\n      <p>{new Date(props.episodes[0].published_at).toLocaleDateString}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\n//SSG (versão estatica da pagina)\r\nexport const getStaticProps: GetStaticProps = async () => {\r\n  const { data } = await api.get('episodes', {\r\n    params: {\r\n      _limit: 12,\r\n      _sort: 'published_at',\r\n      _order: 'desc'\r\n    }\r\n  })\r\n\r\n  const episodes = data.map(episode => {\r\n    return {\r\n      id: episode.id,\r\n      title: episode.title,\r\n      thumbnail: episode.thumbnail,\r\n      members: episode.members,\r\n      publishedAt: format(parseISO(episode.published_at), 'd MMM YY', { locale: ptBR })\r\n    }\r\n  })\r\n  return {\r\n    props: {\r\n      episodes: data,\r\n    },\r\n    revalidate: 60 * 60 * 8,\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}